
Milestone 2: Implement enough to run tests. This requires closures, exceptions, collections.

Milestone 3: Run the compiler in process so we can communicate changes via strings instead of compiled code.

Milestone 4: Fully self-hosted server. This requires all the networking stuff be written in Server Smalltalk.

To do:
* Optimize sizeof(Object). 
* Fallback from primitive to regular method
* Bytecode dispatch with panics for error handling instead of return values
* Dispatch table for primitives
* Method lookup cache
* Basic hash stored in object header?
* Object structure into Object, Class, Method, Context, indexable (maybe make this its own kind of subclass)
* Context is not currently an Object
* Function for dereferencing an Object pointer with guards against immediates
* Block closures
* Convert all internal objects to Smalltalk objects
* Message not understood
* Intern symbols
* Allocate in raw memory

Done:
* Review tests, particularly one level up tests that seem redundant
* Fix MethodBuilder to have a call per bytecode
* Bytecode assembler
* Rip out dumb integer overflow stuff
* Rip out mixed float/integer support in prims* Float prims
* Immediate integer
* Immediate nil, true, false
* Immediate float
Milestone 1: Implement enough to run 2+3. Everything is externally compiled.
* Invoke primitives after lookup
* Class as a primitive instead of a bytecode
